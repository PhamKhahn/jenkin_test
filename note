1. Step
- `sh` : thuc thi 1 shell command
- `junit` : tổng hợp báo cáo về việc test
2. Step wrap other step
- `retry` : thuc thi den khi nao success thi thoi
Hoac
- `timeout` : thoat neu step chiem qua nhieu tgian

=> ket hop 2 step nay 
=> VD: chay retry 1 script 3 lan lien tuc neu. 
Sau do chay timeout cho script health-check 3 phut ma step chua xong thi Pipeline bi danh dau falied o Deploy stage

Các wrapper như `timeout` hay `retry` ,...  có thể chứ các steps khác bao gồm cả timeout và retry


```
pipeline {
    agent any
    stages {
        stage('Deploy') {
            steps {
                retry(3) {
                    sh './flakey-deploy.sh'
                }

                timeout(time: 3, unit: 'MINUTES') {
                    sh './health-check.sh'
                }
            }
        }
    }
}
```
Có thể dùng các step ntn
```
pipeline {
    agent any
    stages {
        stage('Deploy') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    retry(5) {
                        sh './flakey-deploy.sh'
                    }
                }
            }
        }
    }
}
```

3. Action khi kết thúc
- Sau khi kết thúc pipeline => Ta có thể cần chạy 1 số bước mang tính chất dọn dẹp, thông báo hoặc chạy các step dựa trên outcome của pipeline
=> Sử dụng `post`

```
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    retry(5) {
                        echo 'Hello world'
                    }
                }
            }
        }
    }
    post {
        alway {
            echo "Luon thuc hien"
        }
        success {
            echo "Chay neu success"
        }
        failure {
            echo "chay neu fail"
        }
        unstable {
            echo "Chay neu run duoc mark unstable (khong on dinh)"
        }
        changed {
            echo "Chay neu state cua Pipeline duoc changed"
            echo "VD: neu Pipeline luc truoc fail nhung hien tai thi da success"
        }
    }
}

```

4. Define các execution environment (xác định môi trường thực thi)
https://www.jenkins.io/doc/pipeline/tour/agents/

- sử dụng chỉ thị `agent` : nói cho Jenkins biết nơi và cách thực thi Pipeline hoặc tập con của nó 
=> `agent` là chỉ thị cần thiết trong Pipeline
- 1 số vấn đề lquan đến agent:
	- tất cả các step contained trong block sẽ được xếp vào queue để thực thi bởi Jenkins. Ngay khi có 1 executor được available, các step này sẽ được thực thi
	- 1 workspace sẽ là nơi chứa các file được check out từ source control cũng như các file bổ sung cho Pipeline

Define agent sử dụng docker 
```
pipeline {
    agent {
        docker { image 'node:14-alpine' }
    }
    stages {
        stage('Test') {
            steps {
                sh 'node --version'
            }
        }
    }

}
```

5. Sử dụng environment variables
- Biến môi trường có thể được set global hoặc theo từng stage (để apply riêng trên từng stage)

https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables

```
pipeline {
    agent any
    environment {
        AGE = 15
        NAME = "Pham Quoc Khanh"
    }
    stages {
        stage('Test') {
            steps {
                echo "My name is ${NAME}"
                echo "My age is ${AGE}"
                sh 'printenv'
            }
        }
    }
}
```

- 1 common use nữa là dùng biến môi trường để truyền vào thay cho Credential. Chứ không truyền trực tiếp Credential cho Jenkinsfile

https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials


## PIPELINE
- pipeline code viết bằng groovy syntax -> nếu IDE không highlight syntax 1 cách chính xác -> thêm `#!/usr/bin/env groovy` ở đầu Jenkinsfile

- **built-in documentation** sẽ được gen ra và update dựa trên các plugin đã install
```
${YOUR_JENKINS_URL}/pipeline-syntax
```
- sử dụng tính năng `Pipeline Syntax` trong job để gen ra các syntax phù hợp.

- **Global Variable** 
```
- pipeline cũng cung cấp tập built-in "Global variable reference" -> được tự động gia tăng bởi các plugin
-  ${YOUR_JENKINS_URL}/pipeline-syntax/globals

Default:
    - env : exposes biến môi trường
    - params : exposes tất cả parameter được define cho pipeline (ở dạng read-only)
    - currentBuild : được sử dụng để khám phá thông tin về Pipeline hiện đang thực thi (VD; currentBuild.result, currentBuild.displayName,...)
```
- Dùng `${YOUR_JENKINS_URL}/directive-generator` (**Declarative Directive Generator**) để gen config cho các khối

## Using pipeline
- 3 stage nên có: Build, Test, Deploy
- Environment variables
    - ex:  env.JENKINS_URL
- set environment variables : có thể set tĩnh hoặc động
```
pipeline {
    agent any
    environment { 
        CC = 'clang'
    }
    stages {
        stage('Example') {
            environment { 
                DEBUG_FLAGS = '-g'
            }
            steps {
                sh 'printenv'
            }
        }
    }
}
```
```
pipeline {
    agent any 
    environment {
        // Using returnStdout
        CC = """${sh(
                returnStdout: true,
                script: 'echo "clang"'
            )}""" 
        // Using returnStatus
        EXIT_STATUS = """${sh(
                returnStatus: true,
                script: 'exit 1'
            )}"""
    }
    stages {
        stage('Example') {
            environment {
                DEBUG_FLAGS = '-g'
            }
            steps {
                sh 'printenv'
            }
        }
    }
}
```
- **Handing Credentials** : không truyền dạng text 1 cách rõ ràng vào file pipeline mà sẽ truyền thông qua biến . Sử dụng syntax `credentials('')`
```
pipeline {
    agent {
        // Define agent details here
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    }
    stages {
        stage('Example stage 1') {
            steps {
                // 
            }
        }
        stage('Example stage 2') {
            steps {
                // 
            }
        }
    }
}
```
```
Vào tính năng Snippet Generator -> chọn withCredentials: Bind credentials to variables -> gen code tương ứng cho credentials
```

- **Chuỗi nội suy** : lưu ý không dùng với các biên môi trường credentials vì dẫn đến lộ thông tin

```
sh("curl -u ${EXAMPLE_CREDS_USR}:${EXAMPLE_CREDS_PSW} https://example.com/")  -> Lộ thông tin vì biến được nội suy trực tiếp


sh('curl -u $EXAMPLE_CREDS_USR:$EXAMPLE_CREDS_PSW https://example.com/') _> nên dùng nháy đơn ntn -> biến được gọi nhưng không output ra thông tin credentials

```

- Cũng cần chú ý. Có thể bị Injection thông qua nội suy
```
pipeline {
  agent any
  parameters {
    string(name: 'STATEMENT', defaultValue: 'hello; ls /', description: 'What should I say?')
  }
  stages {
    stage('Example') {
      steps {
        /* WRONG! */
        sh("echo ${STATEMENT}")
      }
    }
  }
}
```
=> thay thế bằng dâu 2 dấu `''`

- **Handling parameters** 
    - Declarative Pipeline cho phép Pipeline accept các parameter được user chỉ định vào runtime thông qua `directive parameter`
    - Việc config parameter với Scripted Pipeline được thực hiện với `properties` -> tìm trong `Snippet Generator`
    - Nếu config được chấp nhận -> sẽ xuất hiện option `Build with Parameters` -> access tới các parameter thông qua `params`
```
pipeline {
    agent any
    parameters {
        string(name: 'Greeting', defaultValue: 'Hello', description: 'How should I greet the world?')
    }
    stages {
        stage('Example') {
            steps {
                echo "${params.Greeting} World!"
            }
        }
    }
}
```

- **Handling failure**
    - DPipeline hỗ trợ việc handing failure thông qua `post section` -> 1 số post condition: `always , unstable , success, failure, changed`
    - ScPipeline thì sử dụng Groovy's built-in `try/catch/finally` để handing failure
```
https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#syntax
```

```
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                sh 'make check'
            }
        }
    }
    post {
        always {
            junit '**/target/*.xml'
        }
        failure {
            mail to: team@example.com, subject: 'The Pipeline failed :('
        }
    }
}
```

```
pipeline {
    agent any

    stages {
        stage('Test') {
            steps {
                /* `make check` returns non-zero on test failures,
                * using `true` to allow the Pipeline to continue nonetheless
                */
                sh 'make check || true'  // Không bao giờ trả về non-zero exit code => các Stage tiếp theo cần kiểm tra currentBuild.result để biết stage test có bị lỗi hay không.
                junit '**/target/*.xml' 
            }
        }
    }
}
```

- **sử dụng multi agents** : Pipeline cho phép sử dụng nhiều môi trường khác nhau cho các stage thay vì chọn 1 agent bất kỳ -> tối ưu các stage hơn
```
pipeline {
    agent none
    stages {
        stage('Build') {
            agent any
            steps {
                checkout scm
                sh 'make'
                stash includes: '**/target/*.jar', name: 'app' 
            }
        }
        stage('Test on Linux') {
            agent { 
                label 'linux'
            }
            steps {
                unstash 'app' 
                sh 'make check'
            }
            post {
                always {
                    junit '**/target/*.xml'
                }
            }
        }
        stage('Test on Windows') {
            agent {
                label 'windows'
            }
            steps {
                unstash 'app'
                bat 'make check' 
            }
            post {
                always {
                    junit '**/target/*.xml'
                }
            }
        }
    }
}
```
Step `stash` cho phép capture các tệp matching vs pattern (** / target / *. Jar) để sử dụng lại trong cùng một Pipeline. Khi Pipeline đã hoàn thành việc thực thi, các tệp được lưu trữ sẽ bị xóa khỏi bộ điều khiển Jenkins.

`unstash` -> lấy lại những gì được stash đánh named (app) từ Jenkin Controller đưa vào workspace của Pipeline đang chạy


- Pipeline follow Groovy language nên cho phép bỏ qua dấu mặc đơn xung quanh các arguments và sử dụng nhiều parameter được đánh tên để tạo thành 1 Map trong groovy theo syntax `[key1: value1, key2: value2]`
```
//2 dòng sau tương đương nhau
git url: 'git://example.com/amazing-project.git', branch: 'master'
git([url: 'git://example.com/amazing-project.git', branch: 'master'])

//Tên tham số có thể bỏ qua nếu số lượng tham số chỉ là 1
sh 'echo hello' /* short form  */
sh([script: 'echo hello'])  /* long form */
```

##  **SCripted Pipeline nâng cao** 
- **Parallel execution** : built-in funtion cho Scripted Pipeline -> chạy song song các phần của SP

VD: nếu không dùng parallel -> chạy xong trên Linux -> sẽ chạy trên Windows

Dùng step `parallel` -> thực hiện đồng thời -> giảm tgian thực hiện xuống

```
Jenkinsfile (Scripted Pipeline)
stage('Build') {
    /* .. snip .. */
}

stage('Test') {
    parallel linux: {
        node('linux') {
            checkout scm
            try {
                unstash 'app'
                sh 'make check'
            }
            finally {
                junit '**/target/*.xml'
            }
        }
    },
    windows: {
        node('windows') {
            /* .. snip .. */
        }
    }
}
```


## 1. Running Pipelines
- Multibranch
- Parameters
- Restarting hoặc Rerunning 1 pipeline
- Replay
- Restart từ 1 Stage : Declarative Pipeline có thể restart 1 stage cụ thể
    - Có thể restart bất kỳ stage nào đã chạy trong Declarative Pipeline -> rerun lại 1 stage do lỗi môi trường hoặc chỉ thị không đúng -> tất các input cho Pipeline đều giống như cho stage đã chạy lúc trước (SCM info, build parameter, nội dung các step `stash`) trong original Pipeline nếu được chỉ định.

### Cách sử dụng
- Restart từ UI thông thường
- Restart từ BlueOcean (Cần cài thêm plugin)

## Bảo quản các `stash` để sử dụng cho các stage được restart